scheme 
  Hospital2 = 
    class 
      type 
        WardId,  
        PersonNr,  
        Record,  
        Patient = PersonNr,  
        Nurse = PersonNr,  
        Doctor = PersonNr
         
      type 
        Hospital = {| h : Hospital' :- is_wff(h) |},  
        Hospital' :: 
          wards : WardId -m-> Doctor-set >< Nurse-set  
          patients : Patient -m-> WardId >< Record
         
      value 
        is_wff : Hospital' -> Bool
        is_wff(h) is 
          let mk_Hospital'(ws, pat) = h in 
            (
              all w1, w2 : WardId :- 
                {w1, w2} <<= dom ws /\ w1 ~= w2 => employees(ws(w1)) inter employees(ws(w2)) = {}
            ) /\ 
            (
              all w : WardId :- 
                w isin dom ws => 
                let (ds, ss) = ws(w) in ds inter ss = {} /\ (ds union ss) inter dom pat = {} end
            ) 
          end,  

        employees : Doctor-set >< Nurse-set -> PersonNr-set
        employees(ds, ss) is ds union ss,  

        is_in : PersonNr >< Hospital -> Bool
        is_in(pid, h) is pid isin dom patients(h),  

        discharge : PersonNr >< Hospital -~-> Hospital
        discharge(pid, h) is 
          mk_Hospital'(wards(h), patients(h) \ {pid}) 
          pre is_in(pid, h),  

        doctors : WardId >< Hospital -~-> Doctor-set
        doctors(a, h) is 
          let (ds, ss) = wards(h)(a) in ds end 
          pre a isin dom wards(h) 
    end
